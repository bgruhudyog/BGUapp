

npm install @mui/x-date-pickers @date-io/date-fns --legacy-peer-deps


all transactions modularized code
// // page.js
// "use client";

// import { useState, useEffect } from "react";
// import { useRouter } from "next/navigation";
// import {
//   Container,
//   Box,
//   Typography,
//   Button,
//   Grid,
//   Dialog,
//   DialogActions,
//   DialogContent,
//   DialogContentText,
//   DialogTitle,
//   Snackbar,
//   Alert,
// } from "@mui/material";

// import { fetchTransactions, calculateTotals } from "./utils/fetchData";
// import { sendTotalToTelegram } from "./utils/sendTelegram";
// import TransactionCard from "./components/TransactionCard";
// import TransactionSummary from "./components/TransactionSummary";

// const date = new Date().toLocaleDateString("en-IN", {
//   year: "numeric",
//   month: "2-digit",
//   day: "2-digit",
// });

// export default function AllTransactions() {
//   const [transactions, setTransactions] = useState([]);
//   const [totals, setTotals] = useState({
//     quantity: 0,
//     total: 0,
//     cash: 0,
//     old: 0,
//     remaining: 0,
//   });
//   const [openDialog, setOpenDialog] = useState(false);
//   const [deleteId, setDeleteId] = useState(null);
//   const router = useRouter();
//   const [openSnackbar, setOpenSnackbar] = useState(false);
//   const [snackbarMessage, setSnackbarMessage] = useState("");
//   const [snackbarSeverity, setSnackbarSeverity] = useState("success");

//   useEffect(() => {
//     (async () => {
//       try {
//         const data = await fetchTransactions();
//         setTransactions(data);
//         setTotals(calculateTotals(data));
//       } catch (error) {
//         console.error("Error fetching transactions:", error);
//       }
//     })();
//   }, []);

//   const handleDelete = (id) => {
//     setDeleteId(id);
//     setOpenDialog(true);
//   };

//   const confirmDelete = async () => {
//     try {
//       const { error } = await supabase
//         .from("daily_transactions")
//         .delete()
//         .eq("id", deleteId);

//       if (error) throw error;

//       const data = await fetchTransactions();
//       setTransactions(data);
//       setTotals(calculateTotals(data));
//       setOpenDialog(false);
//     } catch (error) {
//       console.error("Error deleting transaction:", error);
//     }
//   };

//   const handleTelegramSubmit = async () => {
//     try {
//       await sendTotalToTelegram(totals, date);
//       setSnackbarMessage("हिसाब सफलतापूर्वक टेलीग्राम पर भेजा गया!");
//       setSnackbarSeverity("success");
//       setOpenSnackbar(true);
//     } catch (error) {
//       console.error("Error sending totals to Telegram:", error);
//       setSnackbarMessage("हिसाब भेजने में समस्या आई। कृपया पुनः प्रयास करें।");
//       setSnackbarSeverity("error");
//       setOpenSnackbar(true);
//     }
//   };

//   const handleCloseSnackbar = (event, reason) => {
//     if (reason === "clickaway") {
//       return;
//     }
//     setOpenSnackbar(false);
//   };

//   return (
//     <Container sx={{ mt: 4, mb: 4 }}>
//       <Typography variant="h4" gutterBottom sx={{ textAlign: "center" }}>
//         आज का कुल हिसाब{" "}
//       </Typography>

//       <TransactionSummary totals={totals} />

//       <Box
//         sx={{ mb: 2, mt: 4, display: "flex", justifyContent: "space-between" }}
//       >
//         <Button
//           variant="contained"
//           color="primary"
//           onClick={() => router.push("/")}
//         >
//           Main पेज
//         </Button>
//         <Button
//           variant="contained"
//           color="secondary"
//           onClick={handleTelegramSubmit}
//         >
//           telegram पर भेजें
//         </Button>
//       </Box>

//       <Grid container spacing={3} sx={{ mt: 1 }}>
//         {transactions.map((transaction) => (
//           <Grid item xs={12} sm={6} md={4} key={transaction.id}>
//             <TransactionCard transaction={transaction} handleDelete={handleDelete} />
//           </Grid>
//         ))}
//       </Grid>

//       <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
//         <DialogTitle>Confirm Deletion</DialogTitle>
//         <DialogContent>
//           <DialogContentText>
//             क्या आप वाकई इस हिसाब को Delete करना चाहते हैं? डिलीट करने के बाद
//             हिसाब वापस नहीं लाया जा सकता है
//           </DialogContentText>
//         </DialogContent>
//         <DialogActions>
//           <Button onClick={() => setOpenDialog(false)} color="primary">
//             Cancel
//           </Button>
//           <Button onClick={confirmDelete} color="secondary" autoFocus>
//             Delete
//           </Button>
//         </DialogActions>
//       </Dialog>

//       <Snackbar
//         anchorOrigin={{ vertical: "top", horizontal: "center" }}
//         open={openSnackbar}
//         autoHideDuration={3000}
//         onClose={handleCloseSnackbar}
//       >
//         <Alert
//           onClose={handleCloseSnackbar}
//           severity={snackbarSeverity}
//           sx={{ width: "100%" }}
//         >
//           {snackbarMessage}
//         </Alert>
//       </Snackbar>
//     </Container>
//   );
// }
